package pkg;

import js.lib.Uint8Array;
import pako.Options;

/**
 * WEB Упаковщик.
 * Используется для сжатия данных в один файл и обратной распаковки на стороне сервера или клиента.
 * Этот класс предоставляет высокоуровневое API для использования упаковщика.
 * 
 * Отличия от обычного zip архива:
 *   1. Самый минимальный размер генерируемого кода, ближайший аналог весит >300кб, против 60 WebPackager'а. (Сжатый js бинарник)
 *   2. Самая высокая скорость работы за счёт использования pako. (Порт с C в JS, сделанный опытными пофессионалами)
 *   3. Кастомный, бинарный формат. Это не позволит открыть передаваемый по сети архив обычным архиватором. (Можно считать как минусом, так и плюсом)
 *   4. Не содержит никаких зависимостей, кроме pako. (Для выполнения сжатия)
 *   5. Не делает ничего лишнего, даже не расчитывает CRC сумму. (Избыточная проверка, лишние затраты)
 *   6. Работает в браузере и на сервере
 * 
 * Формат записи двоичных данных:
 * ```
 * id, version, [header1, file1], [header2, file2], [header3, file3]
 * ```
 * Где:
 * * id `unsigned Int16` - Уникальный идентификатор, обозначающий формат данных WebPackager'a.
 * * version `unsigned Int8` - Версия данных. Текущая версия: `0x01`.
 * * header - Заголовок описания файла, *смотрите ниже*.
 * * file - Данные файла.
 * 
 * Формат заголовка:
 * ```
 * dataLength, nameLength, name
 * ```
 * Где:
 * * dataLength `unsigned Int32` - Длина файла.
 * * nameLength `unsigned Int16` - Длина имени файла. (Не более 65535 символов ASCI)
 * * name `string ASCI` - Имя файла. Строка закодирована с помощью: `encodeURIComponent()`.
 * 
 * В дебаговом режиме компиляции упаковщик использует дополнительный код для проверки вводимых данных
 * и отлова возможных ошибок эксплуатации, например таких, как превышение максимального размера файла. (Примерно 4 ГБ)
 */
class WebPackager
{
    /**
     * Текущая версия формата данных.
     * Чем больше число - тем старше версия. Распаковщик с младшей версией **не должен** поддерживать старшую версию формата данных.
     * Это версия формата данных, а не самого упаковщика. Суть в том, что формат может меняться независимо от упаковщика.
     */
    static public inline var DATA_VERSION = 0x01;

    /**
     * Уникальный идентификатор формата данных WebPackager'a.
     */
    static public inline var DATA_ID = 0x7624;

    /**
     * Упаковать файлы в архив.
     * Сжимает все переданные файлы в один двоичный файл формата WebPackager'а.
     * @param files Список файлов.
     * @param options Параметры сжатия pako.
     * @return Двоичный файл - архив, содержащий упакованные файлы в формате WebPackager'а.
     */
    static public function compress(files:Array<File>, options:Options = null):Uint8Array {
        var pk = new Packer();
        var i = 0;
        var len = files.length;

        while (i < len) {
            pk.add(files[i].data, files[i].name, options);
            i ++;
        }

        return pk.data;
    }
    
    /**
     * Распаковать архив WebPackager'а.
     * Считывает файлы из переданного архива.
     * @param data Двоичный архив WebPackager'a.
     * @return Список распакованных файлов.
     */
    static public function decompress(data:Dynamic):Array<File> {
        var unpk = new Unpacker(data);
        var files = new Array<File>();

        while (true) {
            var file = unpk.get();

            if (file == null)
                return files;
            else
                files.push(file);
        }
        
        return files;
    }
}